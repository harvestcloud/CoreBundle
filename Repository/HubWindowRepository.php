<?php

/*
 * This file is part of the Harvest Cloud package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace HarvestCloud\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use HarvestCloud\CoreBundle\Entity\OrderCollection;
use HarvestCloud\CoreBundle\Entity\HubWindow;
use HarvestCloud\CoreBundle\Util\WeekView;
use HarvestCloud\CoreBundle\Util\Debug;
use HarvestCloud\CoreBundle\Util\DateTime;

/**
 * HubWindowRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Tom Haskins-Vaughan <tom@harvestcloud.com>
 * @since  2012-10-24
 */
class HubWindowRepository extends EntityRepository
{
    /**
     * findForSelectWindowForOrderCollection()
     *
     * Find all HubWindows that have associated SellerWindows that match
     * all of the Sellers in the given OrderCollection
     *
     * @author Tom Haskins-Vaughan <tom@harvestcloud.com>
     * @since  2012-11-02
     *
     * @return array
     */
    public function findForSelectWindowForOrderCollection(OrderCollection $orderCollection)
    {
        $em = $this->getEntityManager();

        $q  = $em->createQuery('
                SELECT   hw
                FROM     HarvestCloudCoreBundle:HubWindow hw
                JOIN     hw.sellerWindows sw
                JOIN     sw.sellerHubRef  shr
                JOIN     shr.seller       s
                JOIN     hw.hub           h
                WHERE    s.id IN (:seller_ids)
                AND      UNIX_TIMESTAMP(sw.start_time) > :now
                AND      UNIX_TIMESTAMP(sw.start_time) <= :end_of_week
                GROUP BY hw.start_time, h.id
                HAVING   COUNT(sw.id) = :num_sellers
            ')
            ->setParameter('now', time())
            ->setParameter('end_of_week', DateTime::getForEndOfWeek()->format('U'))
            ->setParameter('seller_ids', $orderCollection->getSellerIds())
            ->setParameter('num_sellers', count($orderCollection->getSellerIds()))
        ;

        $windows = $q->getResult();

        // Calculate hub fees
        foreach ($windows as $i => $window)
        {
            $window->setTotalHubFeeForOrderCollection($orderCollection);
        }

        return $windows;
    }

    /**
     * getWeekViewForOrderCollection()
     *
     * @author Tom Haskins-Vaughan <tom@harvestcloud.com>
     * @since  2013-11-07
     *
     * @return array
     */
    public function getWeekViewForOrderCollection(OrderCollection $orderCollection)
    {
        $weekView = new WeekView(new \DateTime(), null, 'D d');

        $windows = $this->findForSelectWindowForOrderCollection($orderCollection);

        foreach ($windows as $window)
        {
            $weekView->addObject($window);
        }

        return $weekView;
    }

    /**
     * getCalendarViewArray()
     *
     * @author Tom Haskins-Vaughan <tom@harvestcloud.com>
     * @since  2012-10-25
     *
     * @param  HarvestCloud\CoreBundle\Entity\Profile $hub
     */
    public function getCalendarViewArray(OrderCollection $orderCollection)
    {
        $windows  = $this->findForSelectWindowForOrderCollection($orderCollection);
        $slots     = HubWindow::getSlots();

        foreach ($windows as $window)
        {
            $hour = $window->getStartTime()->format('H:i');
            $date = $window->getStartTime()->format('Y-m-d');

            if (array_key_exists($hour, $slots) && array_key_exists($date, $slots[$hour]))
            {
                $slots[$hour][$date] = $window; //->getStartTime()->format(\DateTime::ATOM);
            }
        }

        // \HarvestCloud\CoreBundle\Util\Debug::show($slots);

        return $slots;
    }
}
