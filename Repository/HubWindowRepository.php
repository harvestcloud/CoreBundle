<?php

/*
 * This file is part of the Harvest Cloud package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace HarvestCloud\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use HarvestCloud\CoreBundle\Entity\OrderCollection;

/**
 * HubWindowRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Tom Haskins-Vaughan <tom@harvestcloud.com>
 * @since  2012-10-24
 */
class HubWindowRepository extends EntityRepository
{
    /**
     * findForSelectWindowForOrderCollection()
     *
     * Find all HubWindows that have associated SellerWindows that match
     * all of the Sellers in the given OrderCollection
     *
     * @author Tom Haskins-Vaughan <tom@harvestcloud.com>
     * @since  2012-11-02
     *
     * @todo   Need to add some DQL date functions to find only future windows
     *
     * @return array
     */
    public function findForSelectWindowForOrderCollection(OrderCollection $orderCollection)
    {
        $em = $this->getEntityManager();

        $q  = $em->createQuery('
                SELECT   hw
                FROM     HarvestCloudCoreBundle:HubWindow hw
                JOIN     hw.sellerWindows sw
                JOIN     sw.sellerHubRef  shr
                JOIN     shr.seller       s
                WHERE    s.id IN (:seller_ids)
                AND      UNIX_TIMESTAMP(sw.start_time) > :now
                GROUP BY hw.start_time
                HAVING   COUNT(sw.id) = :num_sellers
            ')
            ->setParameter('now', time())
            ->setParameter('seller_ids', $orderCollection->getSellerIds())
            ->setParameter('num_sellers', count($orderCollection->getSellerIds()))
        ;

        $windows = $q->getResult();

        // Calculate hub fees
        foreach ($windows as $i => $window)
        {
            $window->setTotalHubFeeForOrderCollection($orderCollection);
        }

        return $windows;
    }
}
